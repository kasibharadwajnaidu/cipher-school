Lecture58- Representation Of Graphs
a better approach to increase the neighbour for any node, i.e add an edge in the graph.
Assumption- No.of vertex/Node will remain same.but we can increase/decrease connections will the vertex present.
code:
package graphs;
class Graph
{
int v;
int arr[] = new int[v];
String arr[] = new String[v];
LinkedList<Integer> arr[];
Graph(int v)
{
this.v = v;
arr[] = new LinkedList[v};
for(int i=0;i<v;i++)
{
arr[i] = new LinkedList();
}
}
void addEdge(int start, int end)
{
arr[start].add(end_;
arr[end].add(start);
}
void print()
{
for(int i=0;i<v;i++)
{
System.out.print("Neighbors of "+i+" are : ");
}
public class GraphLL {
public static void main(String[] args){
Graph g = new Graph(5);
g.addEdge(0, 1);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(0, 3);
g.addEdge(1, 3);
g.addEdge(2, 4);
g.addEdge(3, 4);
g.print();
}
}


package graphs;
import java.util.*;
class GraphImp
{
HashMap<Integer, HashSet<Integer>> graph = new HashMap();
void addVertex(int data)
{
graph.put(data, new HashSet<>());
}
void addEdge(int start, int end)
{
graph.get(start).add(end);
}
void print()
{
System.out.println("Vertices are : " +graph.KeySet());
for(int i=0;i<v;i++)
{
System.out.print("Neighbour of "+x+" are: ");
System.out.println(grap.get(x));
}
}}
public class GraphSM{
public static void main(String[] args){
g.addEdge(0, 1);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(0, 3);
g.addEdge(1, 3);
g.addEdge(2, 4);
g.addEdge(3, 4);
g.print();
}
}
