Lecture61- Algorithms
packages graphs;
import java.util.Scanner;
public class GraphAlgos {
public static void main(String[] args){
static void dijkstras(int adjMatrix[][], int source)
{
int v = adjMatrix.length;
boolean visited[] = new boolean[v];
int distance[] = new int[v];
for(int i=0;i<v;i++)
{
distance[i] = Integer.MAX_VALUE;
}
distance[source] = 0;
for(int i-0;i,v-1;i++)
{
int minVertex = findMinVertex(distance, visited);
visited[minVertex] = true;
for(int j-0;j<v;j++)
{
if(adjMatrix[minVertex][j]!=0 && !visited[j])
{
int newDistance = distance[minVertex] + adjMatrix[minVertex][j];
if(newDistance<distance[j])
{
distance[j] = new Distance;
}
}
}
}
System.out.println("Shortes paths from "+ source + " are :");
for(int i=0;i<distance.length;i++){
System.out.println(distance[i] + " ");
}
System.out.println();
}
static int findMinVertex(int distance[], int visited[])
{
int minVertex = -1;
for(int i=0;i<distance.length;i++)
{
if(!visited[i] && (minVertex == -1 || distance[i]<distance[minVertex])
{
minVertex = i;
}
}
return minVertex;
}
public static void main(String[] args){
Scanner sc = new Scanner(System.in);
System.out.println("Enter number of Vertices:");
int v = sc.nextInt();
System.out.println("Enter number of Edges:");
int e = sc.nextInt();
int adjMatrix[][] = new int[v][v];
System.out.println("Enter all Edges:");
for(int i=0;i<e;i++)
{
int v1 = sc.nextInt();
int v2 = sc.nextInt();
int w = sc.nextInt();
adjMatrix[v1][v2] = w;
adjMatrix[v2][v1] = w;
}
dijkstaras(adjMatrix, 0);
}
}
