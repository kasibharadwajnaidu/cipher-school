Lecture50- Binary Trees Continued
package trees;
class Node{
int data;
Node left;
Node right;
Node(int data)
{
this.data = data;
this.left = null;
this.right = null;
}
}
public class BinaryTree{
Node root;
BinaryTree(int data)
{
this.root = new Node(data);
}
int TreeSum(Node root)
{
if(root == null) return 0;
return root.data = TreeSum(root.left) + TreeSum(rooot.right);
}
int height(Node root)
{
if(root == null) return -1;
return 1 + Math.max(height(root.left),height(root.right);
}
void printAtLevel(Node head, int level)
{
if(head == null) return;
if(level == 0)
{
System.out.print(root.data + " ");
return;
}
printAtLevel(root.right, level -1);
printAtLevel(root.left, level -1);
System.out.println();
}
void preOrder(Node root){
if(root == null) return;
System.out.print(root.data + " ");
preOrder(root.left);
preOrder(root.right);
}
void inOrder(Node root){
if(root == null)return;
System.out.println(root.data + " ");
inOrder(root.left);
inOrder(root.right);
}
boolean isIdentical(Node root1, Node root2)
{
if(root1 == null && root2 == null) return true;
if(root1 == null || root2 == null) return true;
return root1.data == root2.data && isIdentical(root1.left, root2.left)&& isIdentical(root1.right, root2.right);
}
boolean isMirror(Node root1, Node root2)
{
if(root1 == null && root2 == null) return true;
if(root1 == null || root2 == null) return true;
return root1.data == root2.data && isIdentical(root1.left, root2.left)&& isIdentical(root1.right, root2.right);
}
void toMirror(Node root)
{
if(root == null) return;
Node temp = root.left;
root.left = root.right;
root.right = temp;
toMirror(root.left);
toMirror(root.right);
}
boolean isSymmetric(Node root1, Node root2)
{
if(root1 == null && root2 == null) return true;
if(root1 == null || root2 == null) return true;
return isSymmetric(root1.left, root2.left)&& isSymmetric(root1.right, root2.right);
}
void bfsRec(Node root){
int levels = heigth(root) + 1;
for(int i=0;i<levels;i++)
{
printAtLevelHelper(root, i);
}
System.out.print();
}
void bfsIterative(Node root)
{
if(root == null) return;
QueueNode q = new LinkedList<>();
q.add(root);
while(!q.isEmpty())
{
Node temp = q.poll();
System.out.println(temp.data+ " ");
if(temp.left != null)
{
q.add(temp.left);
}
if (temp.right != null)
{
q.add(temp.right);
}
}
}
public static void main(String[] args){
BinaryTree bt = new BinaryTree(2);
bt.root.left = new Node(3);
bt.root.right = new Node(5);
bt.root.left.right = new Node(9);
bt.root.right.left = new Node(7);

BinaryTree bt = new BinaryTree(2);
bt2.root.left = new Node(3);
bt2.root.right = new Node(5);
bt2.root.left.right = new Node(9);
bt2.root.right.left = new Node(7);

BinaryTree bt = new BinaryTree(2);
bt3.root.left = new Node(3);
bt3.root.right = new Node(5);
bt3.root.left.right = new Node(9);
bt3.root.right.left = new Node(7);
System.out.println(bt.TreeSum(bt.root));
System.out.println(bt.height(bt.root);
bt.printAtLevel(bt.root, 0);
bt.printAtLevel(bt.root, 1);
bt.printAtLevel(bt.root, 2);
bt.preOrder(bt.root);
System.out.println();
bt.inOrder(bt.root);
System.out.println();
System.out.println(bt.isIdentical(bt.root, bt2.root));
System.out.println(bt.isIdentical(bt.root, bt3.root));
System.out.println(bt.isIdentical(bt.root, bt4.root));
System.out.println(bt.isIdentical(bt.root, bt2.root));
bt4.toMirror(bt4.root);
System.out.println(bt.isIdentical(bt.root, bt4.root));
bt4.root data = 10;
System.out.println(bt.isIdentical(bt.root, bt4.root));
}
}
