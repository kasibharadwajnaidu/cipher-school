Lecture41- IFIX, PREFIX & POSTFIX
code:
class Solution
{
public static int evaluatePostFix(String s)
{
Stack<INteger> stack = new Stack<>();
for(int i=0;i<s.length();i++)
{
char c = s.charAt(i);
if(Character.isDigit(c))
{
stack.push(c - '0');
}
else{
int right = stack.pop();
int left = stack.pop();
int res = calculate(left, right, c);
stack.push(res);
}
}
return stack.pop();
}
static int calculate(int left, int right, char c)
{
if( c == '*') return left * right;
else if(c == '/') return left/right;
else if(c == '+')return left + right;
else if(c == '-') return left - right;
return -1;
}
}

package stacks;
import java.utils.Stack;
public class InfixToPostfix {
public static void main(Sring[] args){
String infix = "3+4+5";
String infix2 = "3*+4+5";
System.out.println(infixToPostfix(infix));
System.out.println(infixToPostfix(infix2));
}
static String infixToPostfix(String infix)
{
String res = "";
Stack(Character> tack = new Stack();
for(int i=0;i<infix.length();i++)
{
char c = infix.charAt(i);
if(Character.isDigit(c))
{
res = res + c;
}
else
{
while(precedence(stack.peek())>=Precedence(c))
{
res = res + stack.pop();
}
stack.push(c);
}
}
while(stack.isEmpty())
{
res = res + stack.pop();
}
return res;
}
static it Precedence(char c)
{
if(c == '+' || c == '-')return 1;
if(c == '*' || c == '/') return 2;
retuen -1;
}
}
