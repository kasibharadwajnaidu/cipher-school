Lecture53- Delete A Node In BST
code:
package trees;

BSTNode(){
BSTNode insert(Bst Node root, int data)
{
if(root == null){
return new BSTNode(data);
}
if(data<=root.data)
{
root.left= insert(root.left, data);
}
else{
root.right = insert(root.right, data);
}
return root;
}
int getMin(BSTNode root)
{
if(root == null) return -1;

public static voidmain(String[] args){
BST bst = new BST(15);
bst.root = bst.insert(bst.root, 10);
bst.root = bst.insert(bst.root, 20);
bst.root = bst.insert(bst.root, 8);
bst.root = bst.insert(bst.root, 12);
bst.root = bst.insert(bst.root, 17);
bst.root = bst.insert(bst.root, 25);
bst.root.left = new BSTNode(10);
bst.root.right = new BSTNode(20);
bst.root.left.left = new BStNode(0);
bst.root.left.right= new BStNode(17);
bst.root.right.left = new BStNode(17);
bst.root.right.right = new BStNode(25);
System.out.println(res);
System.out.println(bst.searchItr(bst.root, 12));
System.out.println(bst.searchItr(bst.root, 25));
System.out.println(bst.searchItr(bst.root, 37));
System.out.println(bst.getMin(bst.root));
System.out.println(bst.getMax(bst.root));
bst.preOrder(bst.root);
System.out.println();
bst.inOrder(bst.root);
System.out.println();
bst.postOrder(bst.root);
System.out.println();
bst.delete(bst.root, 25);
bst.bfsIterative(bst.root);
}
}
